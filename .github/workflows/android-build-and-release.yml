name: Android Build & Release (PROD AAB + DEV APK to GitHub Release)

permissions:
  contents: write   # required to create releases

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional tag for the release (e.g. v1.2.3)'
        required: false
        default: ''

jobs:
  # -------- PROD AAB (signed) --------
  build-prod:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        client: [default, mancaksa]   # build both prod variants
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Show Flutter version
        run: flutter --version

      - name: Pub get
        run: flutter pub get

      - name: Codegen
        run: flutter pub run build_runner build --delete-conflicting-outputs

      # ðŸ”‘ Prepare signing per client (no heredoc pitfalls)
      - name: Prepare signing (per client)
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64_DEFAULT:  ${{ secrets.ANDROID_KEYSTORE_BASE64_DEFAULT }}
          ANDROID_KEYSTORE_BASE64_MANCAKSA: ${{ secrets.ANDROID_KEYSTORE_BASE64_MANCAKSA }}
        run: |
          set -euo pipefail
          mkdir -p android/app
          if [[ "${{ matrix.client }}" == "default" ]]; then
            echo "$ANDROID_KEYSTORE_BASE64_DEFAULT" | base64 -d > android/app/upload-keystore.jks
            {
              echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD_DEFAULT }}";
              echo "keyPassword=${{ secrets.ANDROID_KEY_ALIAS_PASSWORD_DEFAULT }}";
              echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS_DEFAULT }}";
              echo "storeFile=upload-keystore.jks";
            } > android/key.properties
          else
            echo "$ANDROID_KEYSTORE_BASE64_MANCAKSA" | base64 -d > android/app/upload-keystore.jks
            {
              echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD_MANCAKSA }}";
              echo "keyPassword=${{ secrets.ANDROID_KEY_ALIAS_PASSWORD_MANCAKSA }}";
              echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS_MANCAKSA }}";
              echo "storeFile=upload-keystore.jks";
            } > android/key.properties
          fi

      - name: Build PROD AAB (client=${{ matrix.client }})
        run: |
          flutter build appbundle \
            --flavor ${{ matrix.client }}Prod \
            -t lib/main.dart \
            --dart-define=CLIENT=${{ matrix.client }} \
            --dart-define=ENV=prod

      - name: Upload PROD AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.client }}-prod-aab
          path: build/app/outputs/bundle/**/app-*-release.aab
          if-no-files-found: error

  # -------- DEV debug APK (no signing needed) --------
  build-dev-apk:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        client: [default, mancaksa]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Pub get
        run: flutter pub get

      - name: Codegen
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build debug APK (client=${{ matrix.client }} Dev)
        run: |
          flutter build apk --debug \
            --flavor ${{ matrix.client }}Dev \
            -t lib/main.dart \
            --dart-define=CLIENT=${{ matrix.client }} \
            --dart-define=ENV=dev

      - name: Upload DEV debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.client }}-dev-debug-apk
          path: build/app/outputs/flutter-apk/app-*-debug.apk
          if-no-files-found: error

  release-dev:        # <â€” indent under jobs
    if: github.ref == 'refs/heads/main'
    needs: [build-dev-apk]
    runs-on: ubuntu-latest
    concurrency:
      group: dev-latest
      cancel-in-progress: true
    steps:
      - name: Download APKs
        uses: actions/download-artifact@v4
        with:
          pattern: "*-dev-debug-apk"
          path: release/dev
          merge-multiple: true

      - name: Rename APKs (extract client from filename)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in release/dev/*.apk; do
            name="$(basename "$f")"
            if [[ "$name" =~ -(default|mancaksa)Dev- ]]; then
              client="${BASH_REMATCH[1]}"
            else
              echo "Cannot infer client from: $name"; exit 1
            fi
            mv "$f" "release/dev/sidigs-${client}-dev-latest.apk"
          done

      - name: Publish/Update dev-latest pre-release
        uses: ncipollo/release-action@v1
        with:
          tag: dev-latest
          name: "Latest Dev"
          prerelease: true
          allowUpdates: true
          makeLatest: false
          artifacts: "release/dev/*.apk"
          artifactErrorsFailBuild: true
          token: ${{ secrets.GITHUB_TOKEN }}

  release-prod:       # <â€” indent under jobs
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.tag != ''
    needs: [build-prod]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download AABs
        uses: actions/download-artifact@v4
        with:
          pattern: "*-prod-aab"
          path: release/prod
          merge-multiple: true

      - name: Stamp filenames with version from pubspec.yaml
        shell: bash
        run: |
          set -euo pipefail
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //; s/+.*//')
          shopt -s nullglob
          for f in release/prod/*.aab; do
            name="$(basename "$f")"
            if [[ "$name" =~ -(default|mancaksa)Prod- ]]; then
              client="${BASH_REMATCH[1]}"
            else
              # fallback: try to detect 'default' or 'mancaksa' anywhere
              if [[ "$name" =~ default ]]; then client=default; elif [[ "$name" =~ mancaksa ]]; then client=mancaksa; else echo "Cannot infer client from: $name"; exit 1; fi
            fi
            mv "$f" "release/prod/sidigs-${client}-prod-v${VERSION}.aab"
          done

      - name: Create GitHub Release (prod)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag != '' && github.event.inputs.tag || github.ref_name }}
          name: "Release ${{ github.event.inputs.tag != '' && github.event.inputs.tag || github.ref_name }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release/prod/*.aab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}